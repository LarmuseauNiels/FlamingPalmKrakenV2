generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Channel {
  ID             String           @id @db.VarChar(25)
  ChannelName    String           @db.VarChar(255)
  VoiceConnected VoiceConnected[]
}

model Members {
  ID             String           @id @db.VarChar(25)
  DisplayName    String?          @db.VarChar(255)
  avatar         String?          @db.VarChar(255)
  PointHistory   PointHistory[]
  Points         Points?
  SSReceiver     SSReceiver?
  SSSender       SSSender?
  VoiceConnected VoiceConnected[]
  i_Island       i_Island?
}

model PointHistory {
  ID        Int      @id @default(autoincrement())
  userid    String   @db.VarChar(25)
  TimeStamp DateTime @default(now()) @db.DateTime(0)
  points    Int
  comment   String   @db.VarChar(255)
  Members   Members  @relation(fields: [userid], references: [ID], onUpdate: Restrict, map: "PointHistory_ibfk_1")

  @@index([userid], map: "userid")
}

model Points {
  userid      String  @id @db.VarChar(25)
  TotalPoints Int     @default(0)
  lastComment String  @default("") @db.VarChar(255)
  Members     Members @relation(fields: [userid], references: [ID], onUpdate: Restrict, map: "Points_ibfk_1")
}

model Reward {
  RewardID    Int          @id @default(autoincrement())
  Title       String       @db.VarChar(125)
  Description String       @db.VarChar(255)
  Price       Int
  imageurl    String       @db.VarChar(255)
  RewardItem  RewardItem[]
}

model RewardItem {
  RewardItemID        Int       @id @default(autoincrement())
  RewardID            Int
  CreationTimeStamp   DateTime  @default(now()) @db.DateTime(0)
  RedemptionTimeStamp DateTime? @db.DateTime(0)
  RedemptionText      String    @db.Text
  RedeemedBy          String?   @default("") @db.VarChar(25)
  Reward              Reward    @relation(fields: [RewardID], references: [RewardID], onDelete: Cascade, map: "RewardItem_ibfk_1")

  @@index([RedeemedBy], map: "RedeemedBy")
  @@index([RewardID], map: "RewardID")
}

model SSLink {
  SenderID   String     @unique(map: "SSLink_SenderID_uindex") @db.VarChar(25)
  ReceiverID String     @unique(map: "SSLink_RecieverID_uindex") @db.VarChar(25)
  confirmed  Boolean?   @default(false)
  SSReceiver SSReceiver @relation(fields: [ReceiverID], references: [ID], onUpdate: Restrict, map: "SSReciever")
  SSSender   SSSender   @relation(fields: [SenderID], references: [ID], onUpdate: Restrict, map: "SSSender")
}

model SSSender {
  ID        String   @id @db.VarChar(25)
  HasEU     Boolean
  HasPaypal Boolean
  HasINTER  Boolean
  IsSend    Boolean? @default(false)
  Members   Members  @relation(fields: [ID], references: [ID], onUpdate: Restrict, map: "sssenderID")
  SSLink    SSLink?
}

model VoiceConnected {
  ID        String   @db.VarChar(25)
  TimeStamp DateTime @default(now()) @db.Timestamp(0)
  ChannelID String   @db.VarChar(25)
  Channel   Channel  @relation(fields: [ChannelID], references: [ID], onDelete: Cascade, map: "VoiceConnected_Channel_ID_fk")
  Members   Members  @relation(fields: [ID], references: [ID], onUpdate: Restrict, map: "VoiceConnected_ibfk_1")

  @@id([ID, TimeStamp, ChannelID])
  @@index([ChannelID], map: "VoiceConnected_Channel_ID_fk")
}

model i_Building {
  ID                Int                 @id @default(autoincrement())
  Name              String?             @db.VarChar(255)
  i_BuildingLevel   i_BuildingLevel[]
  i_Building_Island i_Building_Island[]
}

model i_Building_Island {
  BuildingID      Int
  IslandID        String          @db.VarChar(25)
  level           Int             @default(1) @db.UnsignedTinyInt
  i_Building      i_Building      @relation(fields: [BuildingID], references: [ID], onUpdate: Restrict, map: "i_Building_Island_ibfk_3")
  i_Island        i_Island        @relation(fields: [IslandID], references: [ID], onDelete: Cascade, onUpdate: Restrict, map: "i_Building_Island_ibfk_2")
  i_BuildingLevel i_BuildingLevel @relation(fields: [level, BuildingID], references: [Level, BuildingID], onUpdate: Restrict, map: "i_Building_Island_i_BuildingLevel_Level_BuildingID_fk")

  @@id([BuildingID, IslandID])
  @@index([IslandID], map: "IslandID")
  @@index([BuildingID], map: "i_Building_Island_BuildingID_index")
  @@index([level, BuildingID], map: "i_Building_Island_level_BuildingID_index")
  @@index([level], map: "i_Building_Island_level_index")
}

model i_Island {
  ID                String              @id @db.VarChar(25)
  Wood              Int                 @default(50) @db.UnsignedInt
  Stone             Int                 @default(0) @db.UnsignedInt
  Currency          Int                 @default(0) @db.UnsignedInt
  Food              Int                 @default(0) @db.UnsignedInt
  Manpower          Int                 @default(0) @db.UnsignedInt
  Members           Members             @relation(fields: [ID], references: [ID], onUpdate: Restrict, map: "i_Island_ibfk_1")
  i_Building_Island i_Building_Island[]
  i_Unit_Island     i_Unit_Island[]
}

model i_Unit {
  ID            Int             @id @default(autoincrement()) @db.UnsignedInt
  Name          String          @db.VarChar(255)
  Type          Int             @db.UnsignedTinyInt
  i_Unit_Island i_Unit_Island[]
}

model i_BuildingLevel {
  BuildingID        Int
  Level             Int                 @db.UnsignedTinyInt
  Name              String              @db.VarChar(255)
  Wood              Int                 @default(0) @db.UnsignedMediumInt
  Food              Int                 @default(0) @db.UnsignedMediumInt
  Stone             Int                 @default(0) @db.UnsignedMediumInt
  Time              Int                 @default(0) @db.UnsignedMediumInt
  TClevel           Int?                @default(0) @db.UnsignedTinyInt
  imagename         String              @default("") @db.VarChar(255)
  imagePosY         Int                 @default(0) @db.MediumInt
  imagePosX         Int                 @default(0) @db.MediumInt
  i_Building        i_Building          @relation(fields: [BuildingID], references: [ID], onDelete: Cascade, map: "i_BuildingLevel_ibfk_1")
  i_Building_Island i_Building_Island[]

  @@id([BuildingID, Level])
  @@index([BuildingID, Level], map: "i_BuildingLevel_BuildingID_Level_index")
  @@index([BuildingID], map: "i_BuildingLevel_BuildingID_index")
  @@index([Level], map: "i_BuildingLevel_Level_index")
}

model i_Unit_Island {
  IslandID String   @db.VarChar(25)
  UnitID   Int      @db.UnsignedInt
  count    Int      @db.UnsignedSmallInt
  i_Island i_Island @relation(fields: [IslandID], references: [ID], onDelete: Cascade, map: "i_Unit_Island_ibfk_2")
  i_Unit   i_Unit   @relation(fields: [UnitID], references: [ID], onDelete: Cascade, map: "i_Unit_Island_ibfk_1")

  @@id([IslandID, UnitID])
  @@index([UnitID], map: "UnitID")
}

model SSReceiver {
  ID             String   @id @db.VarChar(25)
  Address        String   @db.Text
  StoreLinks     String   @db.Text
  RequiresEU     Boolean
  RequiresPaypal Boolean
  RequiresINTER  Boolean
  IsReceived     Boolean? @default(false)
  Members        Members  @relation(fields: [ID], references: [ID], onUpdate: Restrict, map: "ID")
  SSLink         SSLink?
}
